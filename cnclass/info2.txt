Additional code: visualization, evaluation 

plt.imshow(xtran[0],cmap='gray')

xtran.shape= (60000,28,28)
xtest.shape
ytran.shape=(60000,)

i = random.randint(1,60000)
label = ytran[i]
plt.imshow(xtran[i],cmap = 'gray')
lgrid= 15; wgrid=15
fig,axes = plt.subplots(lgrid,wgrid, figsize=(17,17))

axes = axes.ravel()
ntrain = len(xtran)
for i in np.arange(o, wgrid*lgrid):
   index = np.random.randint(0,ntrain)
   axes[i].imshow(xtran[index])
   axes[i].set_title(ytran[index],fontsize=8)
   axes[i].axis('off')
   
evaluation = autoencoder.evaluate(noitest.reshape(-1,28,28,1),xtest.reshape(-1,28,28,1))
print("Test accuracy : {:.3f}'.format(evaluation))
# (about 0.299)
   
predicted = autoencorder.predict(noitest[:10].reshape(-1,28,28,1))
   
fig,axes = plt.subplots(nrows=2,ncols=10,sharex=True, sharey=True, figsize(20,4))
for images, row in zip([noitest[:10],predicted],axes):
   for img, ax in zip(images, row):
      ax.imshow(img.reshape((28,28)),cmap='Greys_r')
	  ax.get_xaxis().set_visible(False)
	  ax.get_yaxis().set_visible(False)
		 
   